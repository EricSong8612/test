{"version":3,"sources":["../../src/reporter/index.js"],"names":["require","createReporter","stripIndent","convertHrtime","getErrorFormatter","errorFormatter","reporter","emoji","base","module","exports","setVerbose","isVerbose","panic","error","process","exit","message","arguments","length","call","console","log","render","uptime","prefix","verbose","toFixed","activityTimer","name","spinner","activity","start","hrtime","elapsedTime","elapsed","tick","end","success"],"mappings":";;;;;;;;;;;;eAE2BA,oB;IAAnBC,c,YAAAA,c;;gBACgBD,sB;IAAhBE,W,aAAAA,W;;AACR,IAAMC,gBAAgBH,yBAAtB;;gBAC8BA,mB;IAAtBI,iB,aAAAA,iB;;AAER,IAAMC,iBAAiBD,mBAAvB;AACA,IAAME,WAAWL,eAAe,EAAEM,OAAO,IAAT,EAAf,CAAjB;AACA,IAAMC,OAAO,8BAAsBF,QAAtB,CAAb;;AAEAG,OAAOC,OAAP,GAAiB,sBAAcJ,QAAd,EAAwB;AACvCJ,0BADuC;;AAGvCS,YAHuC,sBAG5BC,SAH4B,EAGjB;AACpB,SAAKA,SAAL,GAAiB,IAAjB;AACD,GALsC;AAOvCC,OAPuC,mBAOxB;AACb,SAAKC,KAAL;AACAC,YAAQC,IAAR,CAAa,CAAb;AACD,GAVsC;AAYvCF,OAZuC,iBAYjCG,OAZiC,EAYxBH,MAZwB,EAYjB;AACpB,QAAII,UAAUC,MAAV,KAAqB,CAArB,IAA0B,OAAOF,OAAP,aAA9B,EAA2D;AACzDH,eAAQG,OAAR;AACAA,gBAAUH,OAAMG,OAAhB;AACD;AACDT,SAAKM,KAAL,CAAWM,IAAX,CAAgB,IAAhB,EAAsBH,OAAtB;AACA,QAAIH,MAAJ,EAAWO,QAAQC,GAAR,CAAYjB,eAAekB,MAAf,CAAsBT,MAAtB,CAAZ;AACZ,GAnBsC;AAqBvCU,QArBuC,kBAqBhCC,MArBgC,EAqBhB;AACrB,SAAKC,OAAL,CAAgBD,MAAhB,UAA2B,CAACV,QAAQS,MAAR,KAAmB,IAApB,EAA0BG,OAA1B,CAAkC,CAAlC,CAA3B;AACD,GAvBsC;AAyBvCC,eAzBuC,yBAyBzBC,IAzByB,EAyBnB;AAClB,QAAMC,UAAUxB,SAASyB,QAAT,EAAhB;AACA,QAAMC,QAAQjB,QAAQkB,MAAR,EAAd;;AAEA,QAAMC,cAAc,SAAdA,WAAc,GAAM;AACxB,UAAIC,UAAUpB,QAAQkB,MAAR,CAAeD,KAAf,CAAd;AACA,aAAU7B,cAAcgC,OAAd,aAAkCR,OAAlC,CAA0C,CAA1C,CAAV;AACD,KAHD;;AAKA,WAAO;AACLK,aAAO,iBAAM;AACXF,gBAAQM,IAAR,CAAaP,IAAb;AACD,OAHI;AAILQ,WAAK,eAAM;AACT/B,iBAASgC,OAAT,CAAoBT,IAApB,gBAA8BK,aAA9B;AACAJ,gBAAQO,GAAR;AACD;AAPI,KAAP;AASD;AA3CsC,CAAxB,CAAjB","file":"index.js","sourcesContent":["// @flow\n\nconst { createReporter } = require(`yurnalist`)\nconst { stripIndent } = require(`common-tags`)\nconst convertHrtime = require(`convert-hrtime`)\nconst { getErrorFormatter } = require(`./errors`)\n\nconst errorFormatter = getErrorFormatter()\nconst reporter = createReporter({ emoji: true })\nconst base = Object.getPrototypeOf(reporter)\n\nmodule.exports = Object.assign(reporter, {\n  stripIndent,\n\n  setVerbose(isVerbose) {\n    this.isVerbose = true\n  },\n\n  panic(...args) {\n    this.error(...args)\n    process.exit(1)\n  },\n\n  error(message, error) {\n    if (arguments.length === 1 && typeof message !== `string`) {\n      error = message\n      message = error.message\n    }\n    base.error.call(this, message)\n    if (error) console.log(errorFormatter.render(error))\n  },\n\n  uptime(prefix: string) {\n    this.verbose(`${prefix}: ${(process.uptime() * 1000).toFixed(3)}ms`)\n  },\n\n  activityTimer(name) {\n    const spinner = reporter.activity()\n    const start = process.hrtime()\n\n    const elapsedTime = () => {\n      var elapsed = process.hrtime(start)\n      return `${convertHrtime(elapsed)[`seconds`].toFixed(3)} s`\n    }\n\n    return {\n      start: () => {\n        spinner.tick(name)\n      },\n      end: () => {\n        reporter.success(`${name} â€” ${elapsedTime()}`)\n        spinner.end()\n      },\n    }\n  },\n})\n"]}