{"version":3,"sources":["../../src/bootstrap/index.js"],"names":["Promise","require","glob","_","slash","fs","md5File","crypto","apiRunnerNode","graphql","store","emitter","loadPlugins","initCache","report","extractQueries","runQueries","writePages","preferDefault","m","default","module","exports","program","directory","dispatch","type","payload","activity","activityTimer","start","config","err","firstLine","toString","split","test","error","process","exit","end","flattenedPlugins","pluginVersions","map","p","version","all","resolve","catch","hashes","pluginsHash","createHash","update","concat","digest","state","getState","oldPluginsHash","status","PLUGINS_HASH","info","stripIndent","remove","ensureDirSync","srcDir","__dirname","siteDir","copy","clobber","panic","hasAPIFile","env","plugin","sync","ssrPlugins","filter","options","pluginOptions","browserPlugins","browserAPIRunner","readFileSync","browserPluginsRequires","join","sSRAPIRunner","ssrPluginsRequires","writeFileSync","extensions","traceId","apiResults","flattenDeep","graphqlRunner","query","context","schema","waitForCascadingActions","checkJobsDone","debounce","jobs","active","length","log","uptime","on"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AACA,IAAMA,UAAUC,mBAAhB;AACA,IAAMC,OAAOD,eAAb;AACA,IAAME,IAAIF,iBAAV;AACA,IAAMG,QAAQH,gBAAd;AACA,IAAMI,KAAKJ,mBAAX;AACA,IAAMK,UAAUL,2BAAhB;AACA,IAAMM,SAASN,iBAAf;;AAEA,IAAMO,gBAAgBP,mCAAtB;;eACoBA,kB;IAAZQ,O,YAAAA,O;;gBACmBR,mB;IAAnBS,K,aAAAA,K;IAAOC,O,aAAAA,O;;AACf,IAAMC,cAAcX,yBAApB;;gBACsBA,yB;IAAdY,S,aAAAA,S;;AACR,IAAMC,SAASb,sBAAf;;gBAIIA,yD;IADFc,c,aAAAA,c;;gBAIEd,6D;IADFe,U,aAAAA,U;;gBAEqBf,wD;IAAfgB,U,aAAAA,U;;AAER;AACA;AACA;AACA;;AAEA,IAAMC,gBAAgB,SAAhBA,aAAgB;AAAA,SAAMC,KAAKA,EAAEC,OAAR,IAAoBD,CAAzB;AAAA,CAAtB;;AAEAE,OAAOC,OAAP;AAAA,wEAAiB,iBAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACf;AACAA,oBAAQC,SAAR,GAAoBpB,MAAMmB,QAAQC,SAAd,CAApB;;AAEAd,kBAAMe,QAAN,CAAe;AACbC,iCADa;AAEbC,uBAASJ;AAFI,aAAf;;AAKA;AACIK,oBAVW,GAUAd,OAAOe,aAAP,sCAVA;;AAWfD,qBAASE,KAAT;AACIC,kBAZW;;AAaf,gBAAI;AACF;AACAA,uBAASb,cAAcjB,QAAWsB,QAAQC,SAAnB,oBAAd,CAAT;AACD,aAHD,CAGE,OAAOQ,GAAP,EAAY;AACNC,uBADM,GACMD,IAAIE,QAAJ,GAAeC,KAAf,OAA2B,CAA3B,CADN;;AAEZ,kBAAI,CAAC,2CAA2CC,IAA3C,CAAgDH,SAAhD,CAAL,EAAiE;AAC/DnB,uBAAOuB,KAAP,iCAA6CL,GAA7C;AACAM,wBAAQC,IAAR,CAAa,CAAb;AACD;AACF;;AAED7B,kBAAMe,QAAN,CAAe;AACbC,qCADa;AAEbC,uBAASI;AAFI,aAAf;;AAKAH,qBAASY,GAAT;;AA7Be;AAAA,mBA+BgB5B,YAAYmB,MAAZ,CA/BhB;;AAAA;AA+BTU,4BA/BS;;;AAiCf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACMC,0BAzCS,GAyCQD,iBAAiBE,GAAjB,CAAqB;AAAA,qBAAKC,EAAEC,OAAP;AAAA,aAArB,CAzCR;AAAA;AAAA,mBA0CM7C,QAAQ8C,GAAR,CAAY,CAC/BxC,uBAD+B,EAE/BN,QAAQ+C,OAAR,CACEzC,QAAWiB,QAAQC,SAAnB,wBAAiDwB,KAAjD,CAAuD,YAAM,CAAE,CAA/D,CADF,CAF+B,EAI5B;AACHhD,oBAAQ+C,OAAR,CACEzC,QAAWiB,QAAQC,SAAnB,sBAA+CwB,KAA/C,CAAqD,YAAM,CAAE,CAA7D,CADF,CAL+B,CAAZ,CAOhB;AAPgB,aA1CN;;AAAA;AA0CTC,kBA1CS;AAmDTC,uBAnDS,GAmDK3C,OACjB4C,UADiB,QAEjBC,MAFiB,CAEV,yBAAeV,eAAeW,MAAf,CAAsBJ,MAAtB,CAAf,CAFU,EAGjBK,MAHiB,OAnDL;AAuDXC,iBAvDW,GAuDH7C,MAAM8C,QAAN,EAvDG;AAwDTC,0BAxDS,GAwDQF,SAASA,MAAMG,MAAf,GAAwBH,MAAMG,MAAN,CAAaC,YAArC,KAxDR;;AA0Df;AACA;AACA;AACA;AACA;;AACA,gBAAIF,kBAAkBP,gBAAgBO,cAAtC,EAAsD;AACpD3C,qBAAO8C,IAAP,CAAY9C,OAAO+C,WAAnB;AAKD;;AArEc,kBAuEX,CAACJ,cAAD,IAAmBP,gBAAgBO,cAvExB;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAyELpD,GAAGyD,MAAH,CAAavC,QAAQC,SAArB,aAzEK;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AA2EXV,mBAAOuB,KAAP;;AA3EW;AA6Eb;AACA;AACA3B,kBAAMe,QAAN,CAAe;AACbC;AADa,aAAf;;AA/Ea;;AAoFf;AACAhB,kBAAMe,QAAN,CAAe;AACbC,yCADa;AAEbC,uBAASuB;AAFI,aAAf;;AAKA;AACA;AACArC;;AAEA;AA9Fe;AAAA,mBA+FTR,GAAG0D,aAAH,CAAoBxC,QAAQC,SAA5B,oBA/FS;;AAAA;;AAiGf;AACAI,uBAAWd,OAAOe,aAAP,qBAAX;AACAD,qBAASE,KAAT;AACMkC,kBApGS,GAoGGC,SApGH;AAqGTC,mBArGS,GAqGI3C,QAAQC,SArGZ;AAAA;AAAA;AAAA,mBAuGPnB,GAAG8D,IAAH,CAAQH,MAAR,EAAgBE,OAAhB,EAAyB,EAAEE,SAAS,IAAX,EAAzB,CAvGO;;AAAA;AAAA;AAAA,mBAwGP/D,GAAG0D,aAAH,CAAoBxC,QAAQC,SAA5B,kBAxGO;;AAAA;AAAA;AAAA,mBAyGPnB,GAAG0D,aAAH,CAAoBxC,QAAQC,SAA5B,qBAzGO;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AA2GbV,mBAAOuD,KAAP;;AA3Ga;;AA8Gf;AACA;AACMC,sBAhHS,GAgHI,SAAbA,UAAa,CAACC,GAAD,EAAMC,MAAN;AAAA;AACjB;AACAtE,qBAAKuE,IAAL,CAAaD,OAAOzB,OAApB,gBAAsCwB,GAAtC,QAA8C,CAA9C;AAFiB;AAAA,aAhHJ;;AAoHTG,sBApHS,GAoHIvE,EAAEwE,MAAF,CACjBlC,iBAAiBE,GAAjB,CAAqB,kBAAU;AAC7B,qBAAO;AACLI,yBAASuB,kBAAkBE,MAAlB,CADJ;AAELI,yBAASJ,OAAOK;AAFX,eAAP;AAID,aALD,CADiB,EAOjB;AAAA,qBAAUL,OAAOzB,OAAjB;AAAA,aAPiB,CApHJ;AA6HT+B,0BA7HS,GA6HQ3E,EAAEwE,MAAF,CACrBlC,iBAAiBE,GAAjB,CAAqB,kBAAU;AAC7B,qBAAO;AACLI,yBAASuB,sBAAsBE,MAAtB,CADJ;AAELI,yBAASJ,OAAOK;AAFX,eAAP;AAID,aALD,CADqB,EAOrB;AAAA,qBAAUL,OAAOzB,OAAjB;AAAA,aAPqB,CA7HR;AAuIXgC,4BAvIW;;;AAyIf,gBAAI;AACFA,iCAAmB1E,GAAG2E,YAAH,CACdd,OADc,qCAAnB;AAID,aALD,CAKE,OAAOlC,GAAP,EAAY;AACZlB,qBAAOuD,KAAP,qBAA+BH,OAA/B,6BAAgElC,GAAhE;AACD;;AAEKiD,kCAlJS,GAkJgBH,eAC5BnC,GAD4B,CAE3B;AAAA,oDAEmB6B,OAAOzB,OAF1B,4BAGW,yBAAeyB,OAAOI,OAAtB,CAHX;AAAA,aAF2B,EAQ5BM,IAR4B,KAlJhB;;;AA4JfH,mDAAqCE,sBAArC,WAAiEF,gBAAjE;;AAEII,wBA9JW;;;AAgKf,gBAAI;AACFA,6BAAe9E,GAAG2E,YAAH,CAAmBd,OAAnB,iCAAf;AACD,aAFD,CAEE,OAAOlC,GAAP,EAAY;AACZlB,qBAAOuD,KAAP,qBAA+BH,OAA/B,yBAA4DlC,GAA5D;AACD;;AAEKoD,8BAtKS,GAsKYV,WACxB/B,GADwB,CAEvB;AAAA,oDAEmB6B,OAAOzB,OAF1B,4BAGW,yBAAeyB,OAAOI,OAAtB,CAHX;AAAA,aAFuB,EAQxBM,IARwB,KAtKZ;;AA+KfC,+CAAiCC,kBAAjC,WAAyDD,YAAzD;;AAEA9E,eAAGgF,aAAH,CACKnB,OADL,6BAEEa,gBAFF;AAKA1E,eAAGgF,aAAH,CAAoBnB,OAApB,yBAAiDiB,YAAjD;;AAEAvD,qBAASY,GAAT;;AAEA;AACAZ,uBAAWd,OAAOe,aAAP,8BAAX;AACAD,qBAASE,KAAT;AA5Le;AAAA,mBA6LT7B,kCA7LS;;AAAA;AA8Lf2B,qBAASY,GAAT;;AAEA;AACAZ,uBAAWd,OAAOe,aAAP,mBAAX;AACAD,qBAASE,KAAT;AAlMe;AAAA,mBAmMT7B,sBAnMS;;AAAA;AAoMf2B,qBAASY,GAAT;;AAEA;AACM8C,sBAvMS,GAuMI,eAvMJ;AAwMf;AACA;;AAzMe;AAAA,mBA0MU9E,sCAAsC;AAC7D+E;AAD6D,aAAtC,CA1MV;;AAAA;AA0MTC,sBA1MS;;;AA8Mf9E,kBAAMe,QAAN,CAAe;AACbC,4CADa;AAEbC,uBAASxB,EAAEsF,WAAF,CAAc,CAACH,UAAD,EAAaE,UAAb,CAAd;AAFI,aAAf;;AAKME,yBAnNS,GAmNO,SAAhBA,aAAgB,CAACC,KAAD,EAAyB;AAAA,kBAAjBC,OAAiB,uEAAP,EAAO;;AAC7C,kBAAMC,SAASnF,MAAM8C,QAAN,GAAiBqC,MAAhC;AACA,qBAAOpF,QAAQoF,MAAR,EAAgBF,KAAhB,EAAuBC,OAAvB,EAAgCA,OAAhC,EAAyCA,OAAzC,CAAP;AACD,aAtNc;;AAwNf;;;AACAhE,uBAAWd,OAAOe,aAAP,iBAAX;AACAD,qBAASE,KAAT;AA1Ne;AAAA,mBA2NTtB,+BAA+B;AACnCC,uBAASiF,aAD0B;AAEnCH,8CAFmC;AAGnCO,uCAAyB;AAHU,aAA/B,CA3NS;;AAAA;AAgOflE,qBAASY,GAAT;;AAEA;AACAZ,uBAAWd,OAAOe,aAAP,eAAX;AACAD,qBAASE,KAAT;AApOe;AAAA,mBAqOTtB,6BAA6B;AACjCC,uBAASiF,aADwB;AAEjCH,4CAFiC;AAGjCO,uCAAyB;AAHQ,aAA7B,CArOS;;AAAA;AA0OflE,qBAASY,GAAT;;AAEA;AACA;AACA;AACA;AACAZ,uBAAWd,OAAOe,aAAP,yBAAX;AACAD,qBAASE,KAAT;AAjPe;AAAA,mBAkPTtB,uCAAuC;AAC3CC,uBAASiF,aADkC;AAE3CH,sDAF2C;AAG3CO,uCAAyB;AAHkB,aAAvC,CAlPS;;AAAA;AAuPflE,qBAASY,GAAT;AACA;AACAZ,uBAAWd,OAAOe,aAAP,mCAAX;AACAD,qBAASE,KAAT;AA1Pe;AAAA,mBA2PTf,gBA3PS;;AAAA;AA4Pfa,qBAASY,GAAT;;AAEA;AACAZ,uBAAWd,OAAOe,aAAP,uBAAX;AACAD,qBAASE,KAAT;AAhQe;AAAA,mBAiQTd,YAjQS;;AAAA;AAkQfY,qBAASY,GAAT;;AAEA;AACAZ,uBAAWd,OAAOe,aAAP,uBAAX;AACAD,qBAASE,KAAT;AAtQe;AAAA,mBAuQTb,YAvQS;;AAAA;AAwQfW,qBAASY,GAAT;;AAEA;AACAZ,uBAAWd,OAAOe,aAAP,iBAAX;AACAD,qBAASE,KAAT;AA5Qe;AAAA,mBA6QT7B,sBA7QS;;AAAA;AA8Qf2B,qBAASY,GAAT;;AAEMuD,yBAhRS,GAgRO5F,EAAE6F,QAAF,CAAW,mBAAW;AAC1C,kBAAMzC,QAAQ7C,MAAM8C,QAAN,EAAd;AACA,kBAAID,MAAM0C,IAAN,CAAWC,MAAX,CAAkBC,MAAlB,KAA6B,CAAjC,EAAoC;AAClCrF,uBAAOsF,GAAP;AACAtF,uBAAO8C,IAAP,2BAAoCtB,QAAQ+D,MAAR,EAApC;AACAvF,uBAAOsF,GAAP;AACArD,wBAAQ,EAAE2C,4BAAF,EAAR;AACD;AACF,aARqB,EAQnB,GARmB,CAhRP;;AAAA,kBA0RXhF,MAAM8C,QAAN,GAAiByC,IAAjB,CAAsBC,MAAtB,CAA6BC,MAA7B,KAAwC,CA1R7B;AAAA;AAAA;AAAA;;AA2RbrF,mBAAOsF,GAAP;AACAtF,mBAAO8C,IAAP,2BAAoCtB,QAAQ+D,MAAR,EAApC;AACAvF,mBAAOsF,GAAP;AA7Ra,6CA8RN,EAAEV,4BAAF,EA9RM;;AAAA;AAAA,6CAgSN,IAAI1F,OAAJ,CAAY,mBAAW;AAC5B;AACAW,sBAAQ2F,EAAR,YAAsB;AAAA,uBAAMP,cAAchD,OAAd,CAAN;AAAA,eAAtB;AACD,aAHM,CAhSM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAAA;AAAA;AAAA;AAAA","file":"index.js","sourcesContent":["/* @flow */\nconst Promise = require(`bluebird`)\nconst glob = require(`glob`)\nconst _ = require(`lodash`)\nconst slash = require(`slash`)\nconst fs = require(`fs-extra`)\nconst md5File = require(`md5-file/promise`)\nconst crypto = require(`crypto`)\n\nconst apiRunnerNode = require(`../utils/api-runner-node`)\nconst { graphql } = require(`graphql`)\nconst { store, emitter } = require(`../redux`)\nconst loadPlugins = require(`./load-plugins`)\nconst { initCache } = require(`../utils/cache`)\nconst report = require(`../reporter`)\n\nconst {\n  extractQueries,\n} = require(`../internal-plugins/query-runner/query-watcher`)\nconst {\n  runQueries,\n} = require(`../internal-plugins/query-runner/page-query-runner`)\nconst { writePages } = require(`../internal-plugins/query-runner/pages-writer`)\n\n// Override console.log to add the source file + line number.\n// Useful for debugging if you lose a console.log somewhere.\n// Otherwise leave commented out.\n// require(`./log-line-function`)\n\nconst preferDefault = m => (m && m.default) || m\n\nmodule.exports = async (program: any) => {\n  // Fix program directory path for windows env\n  program.directory = slash(program.directory)\n\n  store.dispatch({\n    type: `SET_PROGRAM`,\n    payload: program,\n  })\n\n  // Try opening the site's gatsby-config.js file.\n  let activity = report.activityTimer(`open and validate gatsby-config.js`)\n  activity.start()\n  let config\n  try {\n    // $FlowFixMe\n    config = preferDefault(require(`${program.directory}/gatsby-config`))\n  } catch (err) {\n    const firstLine = err.toString().split(`\\n`)[0]\n    if (!/Error: Cannot find module.*gatsby-config/.test(firstLine)) {\n      report.error(`Could not load gatsby-config`, err)\n      process.exit(1)\n    }\n  }\n\n  store.dispatch({\n    type: `SET_SITE_CONFIG`,\n    payload: config,\n  })\n\n  activity.end()\n\n  const flattenedPlugins = await loadPlugins(config)\n\n  // Check if any plugins have been updated since our last run. If so\n  // we delete the cache is there's likely been changes\n  // since the previous run.\n  //\n  // We do this by creating a hash of all the version numbers of installed\n  // plugins, the site's package.json, gatsby-config.js, and gatsby-node.js.\n  // The last, gatsby-node.js, is important as many gatsby sites put important\n  // logic in there e.g. generating slugs for custom pages.\n  const pluginVersions = flattenedPlugins.map(p => p.version)\n  const hashes = await Promise.all([\n    md5File(`package.json`),\n    Promise.resolve(\n      md5File(`${program.directory}/gatsby-config.js`).catch(() => {})\n    ), // ignore as this file isn't required),\n    Promise.resolve(\n      md5File(`${program.directory}/gatsby-node.js`).catch(() => {})\n    ), // ignore as this file isn't required),\n  ])\n  const pluginsHash = crypto\n    .createHash(`md5`)\n    .update(JSON.stringify(pluginVersions.concat(hashes)))\n    .digest(`hex`)\n  let state = store.getState()\n  const oldPluginsHash = state && state.status ? state.status.PLUGINS_HASH : ``\n\n  // Check if anything has changed. If it has, delete the site's .cache\n  // directory and tell reducers to empty themselves.\n  //\n  // Also if the hash isn't there, then delete things just in case something\n  // is weird.\n  if (oldPluginsHash && pluginsHash !== oldPluginsHash) {\n    report.info(report.stripIndent`\n      One or more of your plugins have changed since the last time you ran Gatsby. As\n      a precaution, we're deleting your site's cache to ensure there's not any stale\n      data\n    `)\n  }\n\n  if (!oldPluginsHash || pluginsHash !== oldPluginsHash) {\n    try {\n      await fs.remove(`${program.directory}/.cache`)\n    } catch (e) {\n      report.error(`Failed to remove .cache files.`, e)\n    }\n    // Tell reducers to delete their data (the store will already have\n    // been loaded from the file system cache).\n    store.dispatch({\n      type: `DELETE_CACHE`,\n    })\n  }\n\n  // Update the store with the new plugins hash.\n  store.dispatch({\n    type: `UPDATE_PLUGINS_HASH`,\n    payload: pluginsHash,\n  })\n\n  // Now that we know the .cache directory is safe, initialize the cache\n  // directory.\n  initCache()\n\n  // Ensure the public/static directory is created.\n  await fs.ensureDirSync(`${program.directory}/public/static`)\n\n  // Copy our site files to the root of the site.\n  activity = report.activityTimer(`copy gatsby files`)\n  activity.start()\n  const srcDir = `${__dirname}/../cache-dir`\n  const siteDir = `${program.directory}/.cache`\n  try {\n    await fs.copy(srcDir, siteDir, { clobber: true })\n    await fs.ensureDirSync(`${program.directory}/.cache/json`)\n    await fs.ensureDirSync(`${program.directory}/.cache/layouts`)\n  } catch (err) {\n    report.panic(`Unable to copy site files to .cache`, err)\n  }\n\n  // Find plugins which implement gatsby-browser and gatsby-ssr and write\n  // out api-runners for them.\n  const hasAPIFile = (env, plugin) =>\n    // TODO make this async...\n    glob.sync(`${plugin.resolve}/gatsby-${env}*`)[0]\n\n  const ssrPlugins = _.filter(\n    flattenedPlugins.map(plugin => {\n      return {\n        resolve: hasAPIFile(`ssr`, plugin),\n        options: plugin.pluginOptions,\n      }\n    }),\n    plugin => plugin.resolve\n  )\n  const browserPlugins = _.filter(\n    flattenedPlugins.map(plugin => {\n      return {\n        resolve: hasAPIFile(`browser`, plugin),\n        options: plugin.pluginOptions,\n      }\n    }),\n    plugin => plugin.resolve\n  )\n\n  let browserAPIRunner = ``\n\n  try {\n    browserAPIRunner = fs.readFileSync(\n      `${siteDir}/api-runner-browser.js`,\n      `utf-8`\n    )\n  } catch (err) {\n    report.panic(`Failed to read ${siteDir}/api-runner-browser.js`, err)\n  }\n\n  const browserPluginsRequires = browserPlugins\n    .map(\n      plugin =>\n        `{\n      plugin: require('${plugin.resolve}'),\n      options: ${JSON.stringify(plugin.options)},\n    }`\n    )\n    .join(`,`)\n\n  browserAPIRunner = `var plugins = [${browserPluginsRequires}]\\n${browserAPIRunner}`\n\n  let sSRAPIRunner = ``\n\n  try {\n    sSRAPIRunner = fs.readFileSync(`${siteDir}/api-runner-ssr.js`, `utf-8`)\n  } catch (err) {\n    report.panic(`Failed to read ${siteDir}/api-runner-ssr.js`, err)\n  }\n\n  const ssrPluginsRequires = ssrPlugins\n    .map(\n      plugin =>\n        `{\n      plugin: require('${plugin.resolve}'),\n      options: ${JSON.stringify(plugin.options)},\n    }`\n    )\n    .join(`,`)\n  sSRAPIRunner = `var plugins = [${ssrPluginsRequires}]\\n${sSRAPIRunner}`\n\n  fs.writeFileSync(\n    `${siteDir}/api-runner-browser.js`,\n    browserAPIRunner,\n    `utf-8`\n  )\n  fs.writeFileSync(`${siteDir}/api-runner-ssr.js`, sSRAPIRunner, `utf-8`)\n\n  activity.end()\n\n  // Source nodes\n  activity = report.activityTimer(`source and transform nodes`)\n  activity.start()\n  await require(`../utils/source-nodes`)()\n  activity.end()\n\n  // Create Schema.\n  activity = report.activityTimer(`building schema`)\n  activity.start()\n  await require(`../schema`)()\n  activity.end()\n\n  // Collect resolvable extensions and attach to program.\n  const extensions = [`.js`, `.jsx`]\n  // Change to this being an action and plugins implement `onPreBootstrap`\n  // for adding extensions.\n  const apiResults = await apiRunnerNode(`resolvableExtensions`, {\n    traceId: `initial-resolvableExtensions`,\n  })\n\n  store.dispatch({\n    type: `SET_PROGRAM_EXTENSIONS`,\n    payload: _.flattenDeep([extensions, apiResults]),\n  })\n\n  const graphqlRunner = (query, context = {}) => {\n    const schema = store.getState().schema\n    return graphql(schema, query, context, context, context)\n  }\n\n  // Collect layouts.\n  activity = report.activityTimer(`createLayouts`)\n  activity.start()\n  await apiRunnerNode(`createLayouts`, {\n    graphql: graphqlRunner,\n    traceId: `initial-createLayouts`,\n    waitForCascadingActions: true,\n  })\n  activity.end()\n\n  // Collect pages.\n  activity = report.activityTimer(`createPages`)\n  activity.start()\n  await apiRunnerNode(`createPages`, {\n    graphql: graphqlRunner,\n    traceId: `initial-createPages`,\n    waitForCascadingActions: true,\n  })\n  activity.end()\n\n  // A variant on createPages for plugins that want to\n  // have full control over adding/removing pages. The normal\n  // \"createPages\" API is called every time (during development)\n  // that data changes.\n  activity = report.activityTimer(`createPagesStatefully`)\n  activity.start()\n  await apiRunnerNode(`createPagesStatefully`, {\n    graphql: graphqlRunner,\n    traceId: `initial-createPagesStatefully`,\n    waitForCascadingActions: true,\n  })\n  activity.end()\n  // Extract queries\n  activity = report.activityTimer(`extract queries from components`)\n  activity.start()\n  await extractQueries()\n  activity.end()\n\n  // Run queries\n  activity = report.activityTimer(`run graphql queries`)\n  activity.start()\n  await runQueries()\n  activity.end()\n\n  // Write out files.\n  activity = report.activityTimer(`write out page data`)\n  activity.start()\n  await writePages()\n  activity.end()\n\n  // Update Schema for SitePage.\n  activity = report.activityTimer(`update schema`)\n  activity.start()\n  await require(`../schema`)()\n  activity.end()\n\n  const checkJobsDone = _.debounce(resolve => {\n    const state = store.getState()\n    if (state.jobs.active.length === 0) {\n      report.log(``)\n      report.info(`bootstrap finished - ${process.uptime()} s`)\n      report.log(``)\n      resolve({ graphqlRunner })\n    }\n  }, 100)\n\n  if (store.getState().jobs.active.length === 0) {\n    report.log(``)\n    report.info(`bootstrap finished - ${process.uptime()} s`)\n    report.log(``)\n    return { graphqlRunner }\n  } else {\n    return new Promise(resolve => {\n      // Wait until all side effect jobs are finished.\n      emitter.on(`END_JOB`, () => checkJobsDone(resolve))\n    })\n  }\n}\n"]}