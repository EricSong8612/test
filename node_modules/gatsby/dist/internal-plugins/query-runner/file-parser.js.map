{"version":3,"sources":["../../../src/internal-plugins/query-runner/file-parser.js"],"names":["filePath","fileStr","ast","transpiled","length","item","tmp","babylon","parse","sourceType","plugins","report","error","undefined","sourceFilename","parseToAst","file","text","resolve","reject","then","queries","ExportNamedDeclaration","path","state","traverse","TaggedTemplateExpression","innerPath","gqlAst","getGraphQLTag","definitions","forEach","def","name","value","panic","getMissingNameErrorMessage","push","catch","findGraphQLTags","fs","require","crypto","stripIndent","cache","FileParser","readFileSync","indexOf","hash","createHash","update","digest","astDefinitions","kind","files","documents","all","map","parseFile","doc","set"],"mappings":"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","file":"file-parser.js","sourcesContent":["// @flow\nconst fs = require(`fs-extra`)\nconst crypto = require(`crypto`)\n\n// Traverse is a es6 module...\nimport traverse from \"babel-traverse\"\nconst babylon = require(`babylon`)\n\nconst report = require(`../../reporter`)\nconst { getGraphQLTag } = require(`../../utils/babel-plugin-extract-graphql`)\n\nimport type { DocumentNode, DefinitionNode } from \"graphql\"\n\nconst getMissingNameErrorMessage = file => report.stripIndent`\n  GraphQL definitions must be \"named\".\n  The query with the missing name is in ${file}.\n  To fix the query, add \"query MyQueryName\" to the start of your query.\n  So instead of:\n    {\n      allMarkdownRemark {\n        totalCount\n      }\n    }\n\n  Do:\n    query MyQueryName {\n      allMarkdownRemark {\n        totalCount\n      }\n    }\n`\nasync function parseToAst(filePath, fileStr) {\n  let ast\n\n  let transpiled\n  // TODO figure out why awaiting apiRunnerNode doesn't work\n  // Currently if I try that it just returns immediately.\n  //\n  // Preprocess and attempt to parse source; return an AST if we can, log an\n  // error if we can't.\n  // const transpiled = await apiRunnerNode(`preprocessSource`, {\n  // filename: filePath,\n  // contents: fileStr,\n  // })\n\n  if (transpiled && transpiled.length) {\n    for (const item of transpiled) {\n      try {\n        const tmp = babylon.parse(item, {\n          sourceType: `module`,\n          plugins: [`*`],\n        })\n        ast = tmp\n        break\n      } catch (error) {\n        report.error(error)\n        continue\n      }\n    }\n    if (ast === undefined) {\n      report.error(`Failed to parse preprocessed file ${filePath}`)\n    }\n  } else {\n    try {\n      ast = babylon.parse(fileStr, {\n        sourceType: `module`,\n        sourceFilename: true,\n        plugins: [`*`],\n      })\n    } catch (error) {\n      report.error(\n        `There was a problem parsing \"${filePath}\"; any GraphQL ` +\n          `fragments or queries in this file were not processed. \\n` +\n          `This may indicate a syntax error in the code, or it may be a file type ` +\n          `That Gatsby does not know how to parse.`,\n        error\n      )\n    }\n  }\n\n  return ast\n}\n\nasync function findGraphQLTags(file, text): Promise<Array<DefinitionNode>> {\n  return new Promise((resolve, reject) => {\n    parseToAst(file, text)\n      .then(ast => {\n        let queries = []\n        if (!ast) {\n          resolve(queries)\n          return\n        }\n\n        traverse(ast, {\n          ExportNamedDeclaration(path, state) {\n            path.traverse({\n              TaggedTemplateExpression(innerPath) {\n                const gqlAst = getGraphQLTag(innerPath)\n                if (gqlAst) {\n                  gqlAst.definitions.forEach(def => {\n                    if (!def.name || !def.name.value) {\n                      report.panic(getMissingNameErrorMessage(file))\n                    }\n                  })\n\n                  queries.push(...gqlAst.definitions)\n                }\n              },\n            })\n          },\n        })\n        resolve(queries)\n      })\n      .catch(reject)\n  })\n}\n\nconst cache = {}\n\nexport default class FileParser {\n  async parseFile(file: string): Promise<?DocumentNode> {\n    // TODO figure out why fs-extra isn't returning a promise\n    const text = fs.readFileSync(file, `utf8`)\n\n    if (text.indexOf(`graphql`) === -1) return null\n    const hash = crypto\n      .createHash(`md5`)\n      .update(file)\n      .update(text)\n      .digest(`hex`)\n\n    try {\n      let astDefinitions =\n        cache[hash] || (cache[hash] = await findGraphQLTags(file, text))\n\n      return astDefinitions.length\n        ? {\n            kind: `Document`,\n            definitions: astDefinitions,\n          }\n        : null\n    } catch (err) {\n      report.error(\n        `There was a problem parsing the GraphQL query in file: ${file}`,\n        err\n      )\n      return null\n    }\n  }\n\n  async parseFiles(files: Array<string>): Promise<Map<string, DocumentNode>> {\n    const documents = new Map()\n\n    return Promise.all(\n      files.map(file =>\n        this.parseFile(file).then(doc => {\n          if (!doc) return\n          documents.set(file, doc)\n        })\n      )\n    ).then(() => documents)\n  }\n}\n"]}